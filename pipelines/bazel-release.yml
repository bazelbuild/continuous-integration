---
steps:
  - label: "Get release name"
    agents:
      - "queue=default"
    plugins:
      docker#v3.2.0:
        always-pull: true
        environment:
          - ANDROID_HOME
          - ANDROID_NDK_HOME
          - BUILDKITE_ARTIFACT_UPLOAD_DESTINATION
        image: gcr.io/bazel-public/ubuntu1804:java11
        network: host
        privileged: true
        propagate-environment: true
        propagate-uid-gid: true
        shell: ["/bin/bash", "-e", "-c"]
        volumes:
          - "/etc/group:/etc/group:ro"
          - "/etc/passwd:/etc/passwd:ro"
          - "/opt:/opt:ro"
          - "/var/lib/buildkite-agent:/var/lib/buildkite-agent"
          - "/var/lib/gitmirrors:/var/lib/gitmirrors:ro"
          - "/var/run/docker.sock:/var/run/docker.sock"
    command: |
      git fetch origin master
      git fetch --force origin refs/notes/*:refs/notes/*
      release_name=\$(source scripts/release/common.sh; get_full_release_name)
      echo "release_name = \"\$release_name\""
      buildkite-agent meta-data set "release_name" "\$release_name"

  - wait

  - label: "CentOS 7"
    agents:
      - "queue=default"
    plugins:
      docker#v3.2.0:
        always-pull: true
        environment:
          - ANDROID_HOME
          - ANDROID_NDK_HOME
          - BUILDKITE_ARTIFACT_UPLOAD_DESTINATION
        image: gcr.io/bazel-public/centos7:releaser
        network: host
        privileged: true
        propagate-environment: true
        propagate-uid-gid: true
        shell: ["/bin/bash", "-e", "-c"]
        volumes:
          - "/etc/group:/etc/group:ro"
          - "/etc/passwd:/etc/passwd:ro"
          - "/opt:/opt:ro"
          - "/var/lib/buildkite-agent:/var/lib/buildkite-agent"
          - "/var/lib/gitmirrors:/var/lib/gitmirrors:ro"
          - "/var/run/docker.sock:/var/run/docker.sock"
    command: |
      git fetch origin master
      git fetch --force origin refs/notes/*:refs/notes/*

      release_name=$(buildkite-agent meta-data get "release_name")
      echo "release_name = \"\$release_name\""

      bazel build --sandbox_tmpfs_path=/tmp //src:bazel
      mkdir output
      cp bazel-bin/src/bazel output/bazel

      # TODO(philwo) remove --host_force_python=PY2 when this is fixed:
      # https://github.com/bazelbuild/bazel/issues/8443
      output/bazel build \
          -c opt \
          --stamp \
          --sandbox_tmpfs_path=/tmp \
          --embed_label "\${release_name}" \
          --workspace_status_command=scripts/ci/build_status_command.sh \
          --host_force_python=PY2 \
          src/bazel \
          scripts/packages/with-jdk/install.sh \
          scripts/packages/debian/bazel-debian.deb \
          scripts/packages/debian/bazel.dsc \
          scripts/packages/debian/bazel.tar.gz \
          bazel-distfile.zip

      mkdir artifacts
      cp "bazel-bin/src/bazel" "artifacts/bazel-\${release_name}-linux-x86_64"
      cp "bazel-bin/scripts/packages/with-jdk/install.sh" "artifacts/bazel-\${release_name}-installer-linux-x86_64.sh"
      cp "bazel-bin/scripts/packages/debian/bazel-debian.deb" "artifacts/bazel_\${release_name}-linux-x86_64.deb"
      cp "bazel-genfiles/scripts/packages/debian/bazel.dsc" "artifacts/bazel_\${release_name}.dsc"
      cp "bazel-genfiles/scripts/packages/debian/bazel.tar.gz" "artifacts/bazel_\${release_name}.tar.gz"
      cp "bazel-genfiles/bazel-distfile.zip" "artifacts/bazel-\${release_name}-dist.zip"

      cd artifacts
      buildkite-agent artifact upload "*"

  - label: macOS
    agents:
      - queue=macos
    command: |
      git fetch origin master
      git fetch --force origin refs/notes/*:refs/notes/*

      release_name=$(buildkite-agent meta-data get "release_name")
      echo "release_name = \"\$release_name\""

      bazel build //src:bazel
      mkdir output
      cp bazel-bin/src/bazel output/bazel

      output/bazel build \
          --define IPHONE_SDK=1 \
          -c opt \
          --stamp \
          --embed_label "\${release_name}" \
          --workspace_status_command=scripts/ci/build_status_command.sh \
          src/bazel \
          scripts/packages/with-jdk/install.sh

      mkdir artifacts
      cp "bazel-bin/src/bazel" "artifacts/bazel-\${release_name}-darwin-x86_64"
      cp "bazel-bin/scripts/packages/with-jdk/install.sh" "artifacts/bazel-\${release_name}-installer-darwin-x86_64.sh"

      cd artifacts
      buildkite-agent artifact upload "*"

  - label: Windows
    agents:
      - queue=windows
    command: |
      git fetch origin master
      git fetch --force origin refs/notes/*:refs/notes/*

      buildkite-agent meta-data get "release_name" > release_name.txt
      SET /p RELEASE_NAME=<release_name.txt
      DEL /q release_name.txt

      echo Release: %RELEASE_NAME%

      bazel build //src:bazel.exe
      mkdir output
      copy bazel-bin\src\bazel.exe output\bazel.exe

      output\bazel build -c opt --copt=-w --host_copt=-w --stamp --embed_label %RELEASE_NAME% src/bazel scripts/packages/bazel.zip

      mkdir artifacts
      move bazel-bin\src\bazel artifacts\bazel-%RELEASE_NAME%-windows-x86_64.exe
      move bazel-genfiles\scripts\packages\bazel.zip artifacts\bazel-%RELEASE_NAME%-windows-x86_64.zip

      rem # The "scripts" directory is taken from the release branch.
      rem # Commit 874fe75428 contains a vital bugfix for make_msi_lib.ps1, so only build the .msi
      rem # if the release branch has that commit.
      rem # TODO(laszlocsomor) remove this version check and build the .msi unconditionally after
      rem # Bazel 0.29 (the first version whose release branch will have 874fe75428) is released.
      rem #
      rem # git merge-base fails if the commit is not an ancestor. While this is expected, it fails
      rem # the whole pipeline because BuildKite checks ERRORLEVEL after every command. So we wrap
      rem # the git call in a batch file.
      echo git merge-base --is-ancestor 874fe754282651bdf006c06147842cbb226c6ae9 HEAD 2^>nul >>check-rev.bat
      echo if "%%ERRORLEVEL%%" equ "0" (echo y^>run_ps.txt) else (echo n^>run_ps.txt) >>check-rev.bat
      echo exit /b 0 >>check-rev.bat

      call check-rev.bat
      SET /p RUN_PS_VALUE=<run_ps.txt
      DEL /q run_ps.txt

      if "%RUN_PS_VALUE%" equ "y" (call powershell scripts\packages\msi\make_msi.ps1 artifacts\bazel-%%RELEASE_NAME%%-windows-x86_64.exe)

      cd artifacts
      buildkite-agent artifact upload "*"

  - wait

  - label: "CentOS 7"
    agents:
      - "queue=default"
    plugins:
      docker#v3.2.0:
        always-pull: true
        environment:
          - ANDROID_HOME
          - ANDROID_NDK_HOME
          - BUILDKITE_ARTIFACT_UPLOAD_DESTINATION
        image: gcr.io/bazel-public/centos7:java8
        network: host
        privileged: true
        propagate-environment: true
        propagate-uid-gid: true
        shell: ["/bin/bash", "-e", "-c"]
        volumes:
          - "/etc/group:/etc/group:ro"
          - "/etc/passwd:/etc/passwd:ro"
          - "/opt:/opt:ro"
          - "/var/lib/buildkite-agent:/var/lib/buildkite-agent"
          - "/var/lib/gitmirrors:/var/lib/gitmirrors:ro"
          - "/var/run/docker.sock:/var/run/docker.sock"
    command: |
      git fetch origin master
      git fetch --force origin refs/notes/*:refs/notes/*

      release_name=$(buildkite-agent meta-data get "release_name")
      echo "release_name = \"\$release_name\""

      buildkite-agent artifact download "bazel-\${release_name}-linux-x86_64" .

      chmod +x "bazel-\${release_name}-linux-x86_64"

      "./bazel-\${release_name}-linux-x86_64" info

  - label: "Test on macOS"
    agents:
      - queue=macos
    command: |
      git fetch origin master
      git fetch --force origin refs/notes/*:refs/notes/*

      release_name=$(buildkite-agent meta-data get "release_name")
      echo "release_name = \"\$release_name\""

      buildkite-agent artifact download "bazel-\${release_name}-darwin-x86_64" .

      chmod +x "bazel-\${release_name}-darwin-x86_64"

      "./bazel-\${release_name}-darwin-x86_64" info
  - label: "Test on Windows"
    agents:
      - queue=windows
    command: |
      git fetch origin master
      git fetch --force origin refs/notes/*:refs/notes/*

      buildkite-agent meta-data get "release_name" > release_name.txt
      SET /p RELEASE_NAME=<release_name.txt
      DEL /q release_name.txt

      echo Release: %RELEASE_NAME%

      buildkite-agent artifact download bazel-%RELEASE_NAME%-windows-x86_64.exe .

      bazel-%RELEASE_NAME%-windows-x86_64.exe info

  - wait

  - block: ":rocket: Deploy release artifacts"

  - label: "Deploy release artifacts"
    agents:
      - "queue=default"
    plugins:
      docker#v3.2.0:
        always-pull: true
        environment:
          - ANDROID_HOME
          - ANDROID_NDK_HOME
          - BUILDKITE_ARTIFACT_UPLOAD_DESTINATION
        image: gcr.io/bazel-public/ubuntu1804:java11
        network: host
        privileged: true
        propagate-environment: true
        propagate-uid-gid: true
        shell: ["/bin/bash", "-e", "-c"]
        volumes:
          - "/etc/group:/etc/group:ro"
          - "/etc/passwd:/etc/passwd:ro"
          - "/opt:/opt:ro"
          - "/var/lib/buildkite-agent:/var/lib/buildkite-agent"
          - "/var/lib/gitmirrors:/var/lib/gitmirrors:ro"
          - "/var/run/docker.sock:/var/run/docker.sock"
    command: |
      echo "+++ Fetching Git notes"
      git fetch origin master
      git fetch --force origin refs/notes/*:refs/notes/*

      echo "+++ Downloading release artifacts"
      ARTIFACTS="$(mktemp -d)"
      buildkite-agent artifact download "*" "\${ARTIFACTS}/"

      echo "+++ Importing GPG release key"
      keyfile="$(mktemp --tmpdir)"
      chmod 0600 "\${keyfile}"
      gsutil cat "gs://bazel-trusted-encrypted-secrets/release-key.gpg.enc" | gcloud kms decrypt --project "bazel-public" --location "global" --keyring "buildkite" --key "bazel-release-key" --ciphertext-file "-" --plaintext-file "\${keyfile}"
      gpg --allow-secret-key-import --import "\${keyfile}"
      rm -f "\${keyfile}"

      echo "+++ Deploying release"
      source scripts/ci/build.sh
      deploy_release "\${ARTIFACTS}"

  - wait

  - block: ":e-mail: Generate announcement mail text"

  - label: "Generate announcement mail text"
    agents:
      - "queue=default"
    plugins:
      docker#v3.2.0:
        always-pull: true
        environment:
          - ANDROID_HOME
          - ANDROID_NDK_HOME
          - BUILDKITE_ARTIFACT_UPLOAD_DESTINATION
        image: gcr.io/bazel-public/ubuntu1804:java11
        network: host
        privileged: true
        propagate-environment: true
        propagate-uid-gid: true
        shell: ["/bin/bash", "-e", "-c"]
        volumes:
          - "/etc/group:/etc/group:ro"
          - "/etc/passwd:/etc/passwd:ro"
          - "/opt:/opt:ro"
          - "/var/lib/buildkite-agent:/var/lib/buildkite-agent"
          - "/var/lib/gitmirrors:/var/lib/gitmirrors:ro"
          - "/var/run/docker.sock:/var/run/docker.sock"
    command: |
      git fetch origin master
      git fetch --force origin refs/notes/*:refs/notes/*

      source scripts/ci/build.sh
      generate_email
