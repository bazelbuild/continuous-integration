package build.bazel.dashboard.github.notification;

import build.bazel.dashboard.config.DashboardConfig;
import build.bazel.dashboard.github.issue.GithubIssue;
import build.bazel.dashboard.github.issuelist.GithubIssueList;
import build.bazel.dashboard.github.issuelist.GithubIssueListService;
import build.bazel.dashboard.github.issuelist.GithubIssueListService.ListParams;
import build.bazel.dashboard.github.issuestatus.GithubIssueStatus;
import build.bazel.dashboard.github.user.GithubUser;
import build.bazel.dashboard.github.user.GithubUserService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableList;
import io.reactivex.rxjava3.core.Completable;
import io.reactivex.rxjava3.core.Flowable;
import io.reactivex.rxjava3.core.Single;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Profile;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import java.time.Instant;
import java.util.stream.Collectors;

@Profile("notification")
@RestController
@RequiredArgsConstructor
@Slf4j
public class NotificationTask {
  private final DashboardConfig dashboardConfig;
  private final ObjectMapper objectMapper;
  private final JavaMailSender javaMailSender;
  private final GithubIssueListService githubIssueListService;
  private final GithubUserService githubUserService;

  @PostMapping("/internal/github/issues/notifications")
  public void notifyIssueStatus() {
    startNotifyIssueStatus();
  }

  @Scheduled(cron = "0 0 2 * * MON-FRI", zone = "UTC")
  public void startNotifyIssueStatus() {
    notifyTriageTeam().andThen(notifyUsers()).blockingAwait();
  }

  Completable notifyTriageTeam() {
    ListParams params = new ListParams();
    params.setOwner("bazelbuild");
    params.setRepo("bazel");
    params.setStatus(GithubIssueStatus.Status.TO_BE_REVIEWED);

    return githubIssueListService
        .find(params)
        .flatMapCompletable(
            list -> {
              if (list.getTotal() > 0) {
                return Completable.fromCallable(
                    () -> {
                      String reviewLink =
                          dashboardConfig.getHost()
                              + "/issues?q=%7B%22status%22%3A%22TO_BE_REVIEWED%22%2C%22page%22%3A1%7D";
                      String body =
                          buildNotificationBody(
                              params.getOwner(),
                              params.getRepo(),
                              reviewLink,
                              "issues",
                              "review",
                              list);

                      sendNotification(
                          dashboardConfig.getGithub().getNotification().getToNeedReviewEmail(),
                          body, "review");

                      return null;
                    });
              }

              return Completable.complete();
            });
  }

  private void sendNotification(String to, String body, String action) throws MessagingException {
    MimeMessage mimeMessage = javaMailSender.createMimeMessage();
    MimeMessageHelper message = new MimeMessageHelper(mimeMessage);
    message.setFrom(dashboardConfig.getGithub().getNotification().getFromEmail());
    message.setTo(to);
    Instant now = Instant.ofEpochSecond(Instant.now().getEpochSecond());
    message.setSubject("Please " + action + " Github issues. " + now.toString());

    StringBuilder text = new StringBuilder();
    text.append("<p>Hi there,</p>");
    text.append(body);
    text.append(
            "<p style=\"font-size:small;color:#666\">----<br>This email is generated by the <a"
                + " href=\"")
        .append(dashboardConfig.getHost())
        .append("\">Dashboard</a>.</p>");

    message.setText(text.toString(), true);
    javaMailSender.send(mimeMessage);
  }

  private String buildNotificationBody(
      String owner,
      String repo,
      String reviewLink,
      String type,
      String action,
      GithubIssueList list) {
    StringBuilder body = new StringBuilder();

    body.append("<p>You have ");
    appendLink(body, reviewLink, Integer.toString(list.getTotal()));
    body.append(" ")
        .append(type)
        .append(" to ")
        .append(action)
        .append(". Below are some of them:</p>");

    body.append("<ul>");
    for (GithubIssueList.Item issue : list.getItems()) {
      GithubIssue.Data data;
      try {
        data = GithubIssue.parseData(objectMapper, issue.getData());
      } catch (JsonProcessingException e) {
        continue;
      }

      body.append("<li>");
      appendLink(
          body,
          String.format("https://github.com/%s/%s/issues/%s", owner, repo, issue.getIssueNumber()),
          Integer.toString(issue.getIssueNumber()));

      body.append(" ");
      body.append(data.getTitle());
      body.append("</li>");
    }
    body.append("</ul>");

    body.append("<p>Please check ");
    body.append(reviewLink);
    body.append(".</p>");

    return body.toString();
  }

  private void appendLink(StringBuilder sb, String href, String text) {
    sb.append("<a href=\"");
    sb.append(href);
    sb.append("\">");
    sb.append(text);
    sb.append("</a>");
  }

  Completable notifyUsers() {
    return githubUserService
        .findAll()
        .flatMapCompletable(
            user ->
                Flowable.concatArray(
                        buildNeedTriageMessage(user).toFlowable(),
                        buildFixP0BugsMessage(user).toFlowable(),
                        buildFixP1BugsMessage(user).toFlowable(),
                        buildFixP2BugsMessage(user).toFlowable())
                    .collect(Collectors.joining())
                    .flatMapCompletable(
                        body -> {
                          if (!body.isBlank()) {
                            return Completable.fromCallable(
                                () -> {
                                  sendNotification(user.getEmail(), body, "triage/update");
                                  return null;
                                });
                          }

                          return Completable.complete();
                        }));
  }

  Single<String> buildNeedTriageMessage(GithubUser user) {
    ListParams params = new ListParams();
    params.setOwner("bazelbuild");
    params.setRepo("bazel");
    params.setStatus(GithubIssueStatus.Status.REVIEWED);
    params.setActionOwner(user.getUsername());
    return githubIssueListService
        .find(params)
        .map(
            list -> {
              if (list.getTotal() > 0) {
                String reviewLink =
                    dashboardConfig.getHost()
                        + "/issues?q=%7B%22status%22%3A%22REVIEWED%22%2C%22page%22%3A1%2C%22actionOwner%22%3A%22"
                        + user.getUsername()
                        + "%22%7D";
                return buildNotificationBody(
                    params.getOwner(), params.getRepo(), reviewLink, "issues", "triage", list);
              }
              return "";
            });
  }

  Single<String> buildFixP0BugsMessage(GithubUser user) {
    ListParams params = new ListParams();
    params.setOwner("bazelbuild");
    params.setRepo("bazel");
    params.setStatus(GithubIssueStatus.Status.TRIAGED);
    params.setLabels(ImmutableList.of("P0", "type: bug"));
    params.setActionOwner(user.getUsername());

    return githubIssueListService
        .find(params)
        .map(
            list -> {
              if (list.getTotal() > 0) {
                String reviewLink =
                    dashboardConfig.getHost()
                        + "/issues?q=%7B%22status%22%3A%22TRIAGED%22%2C%22page%22%3A1%2C%22labels%22%3A%5B%22P0%22%5D%2C%22actionOwner%22%3A%22"
                        + user.getUsername()
                        + "%22%7D";
                return buildNotificationBody(
                    params.getOwner(), params.getRepo(), reviewLink, "P0 bugs", "fix", list);
              }
              return "";
            });
  }

  Single<String> buildFixP1BugsMessage(GithubUser user) {
    ListParams params = new ListParams();
    params.setOwner("bazelbuild");
    params.setRepo("bazel");
    params.setStatus(GithubIssueStatus.Status.TRIAGED);
    params.setLabels(ImmutableList.of("P1", "type: bug"));
    params.setActionOwner(user.getUsername());

    return githubIssueListService
        .find(params)
        .map(
            list -> {
              if (list.getTotal() > 0) {
                String reviewLink =
                    dashboardConfig.getHost()
                        + "/issues?q=%7B%22status%22%3A%22TRIAGED%22%2C%22page%22%3A1%2C%22labels%22%3A%5B%22P1%22%5D%2C%22actionOwner%22%3A%22"
                        + user.getUsername()
                        + "%22%7D";
                return buildNotificationBody(
                    params.getOwner(), params.getRepo(), reviewLink, "P1 bugs", "fix", list);
              }
              return "";
            });
  }

  Single<String> buildFixP2BugsMessage(GithubUser user) {
    ListParams params = new ListParams();
    params.setOwner("bazelbuild");
    params.setRepo("bazel");
    params.setStatus(GithubIssueStatus.Status.TRIAGED);
    params.setLabels(ImmutableList.of("P2", "type: bug"));
    params.setActionOwner(user.getUsername());

    return githubIssueListService
        .find(params)
        .map(
            list -> {
              if (list.getTotal() > 0) {
                String reviewLink =
                    dashboardConfig.getHost()
                        + "/issues?q=%7B%22status%22%3A%22TRIAGED%22%2C%22page%22%3A1%2C%22labels%22%3A%5B%22P2%22%5D%2C%22actionOwner%22%3A%22"
                        + user.getUsername()
                        + "%22%7D";
                return buildNotificationBody(
                    params.getOwner(), params.getRepo(), reviewLink, "P2 bugs", "fix", list);
              }
              return "";
            });
  }
}
